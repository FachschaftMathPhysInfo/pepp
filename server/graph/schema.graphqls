scalar timestamptz 

interface Person {
  id: ID!
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
}

type Student implements Person {
  id: ID!
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  answers: [String!]!
  score: Int
  accepted: Boolean
}

type Tutor implements Person {
  id: ID!
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
}

type Event {
  id: ID!
  tutor: Tutor
  title: String!
  description: String
  building: Building
  room: Room
  from: timestamptz!
  to: timestamptz!
}

type Building {
  id: ID!
  name: String
  street: String!
  number: Int!
  city: String!
  zip: String!
}

type Room {
  id: ID!
  building: Building!
  number: String!
}

type Query {
  students: [Student]
  tutors: [Tutor]
  tutor(id: ID!): Tutor
  events: [Event]
}

input NewStudent {
  fn: String!
  sn: String!
  mail: String!
  answers: [String!]
}

input NewTutor {
  fn: String!
  sn: String!
  mail: String!
}

input NewEvent {
  tutorId: ID!
  title: String!
  description: String
  buildingId: ID
  roomId: ID
  from: timestamptz!
  to: timestamptz!
}

type Mutation {
  addRegistration(input: NewStudent!): String!
  addTutor(input: NewTutor!): String!
  newEvent(input: NewEvent!): String!
}
