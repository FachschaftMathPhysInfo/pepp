scalar timestamptz 

interface Person {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
}

type Student implements Person {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  answers: [String!]!
  score: Int
  accepted: Boolean
}

type Tutor implements Person {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
}

type Event {
  id: ID!
  tutor: Tutor
  title: String!
  description: String
  building: Building
  room: String 
  from: timestamptz!
  to: timestamptz!
}

type Building {
  id: ID!
  name: String!
  street: String!
  number: String!
  city: String!
  zip: Int!
  osmLink: String!
  rooms: [String]
}

type Query {
  students: [Student!]!
  tutors: [Tutor!]!
  events: [Event!]!
  buildings: [Building!]!
}

input NewStudent {
  fn: String!
  sn: String!
  mail: String!
  answers: [String!]
}

input NewTutor {
  fn: String!
  sn: String!
  mail: String!
}

input NewEvent {
  tutorMail: String
  title: String!
  description: String
  buildingId: ID
  room: String
  from: timestamptz!
  to: timestamptz!
}

input NewBuilding {
  name: String!
  street: String!
  number: String!
  city: String!
  zip: Int!
  osmLink: String!
  rooms: [String]
}

type Mutation {
  addRegistration(student: NewStudent!): String!
  updateStudentAcceptedStatus(studentMail: String!, accepted: Boolean!): String!
  addTutor(tutor: NewTutor!): String!
  updateTutor(tutorMail: String!, input: NewTutor!): String!
  addEvent(event: NewEvent!): String!
  updateEvent(eventId: ID!, event: NewEvent!): String!
  addBuilding(building: NewBuilding!): String!
  addRoom(buildingId: ID!, room: String!): String!
  updateBuilding(buildingId: ID!, building: NewBuilding!): String!
}
