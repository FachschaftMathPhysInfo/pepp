scalar Time

directive @auth(rule: Rule, role: Role) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @binding(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

enum ScalarType {
  STRING
  INT
  FLOAT
  BOOLEAN
  COLOR
  TIMESTAMP
}

enum Role {
  ADMIN
  USER
}

enum Rule {
  IS_USER
  IS_TUTOR
}

type Tutorial {
  ID: Int!
  event: Event!
  tutors: [User!]
  room: Room!
  registrationCount: Int!
  students: [User!]
}

type User {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  availabilities: [Event!]
  registrations: [Tutorial!]
  tutorials: [Tutorial!]
  applications: [Application!]
  role: Role!
}

enum LabelKind {
  EVENT_TYPE
  TOPIC
}

type Label {
  name: String!
  color: String
}

type Event {
  ID: Int!
  tutorials: [Tutorial!]
  tutorsAvailable: [User!] @auth(role: ADMIN)
  roomsAvailable: [Room!] @auth(role: ADMIN)
  umbrella: Event
  needsTutors: Boolean!
  title: String!
  description: String
  topic: Label!
  type: Label!
  from: Time!
  to: Time!
  registrationForm: Form
}

type Room {
  name: String
  number: String!
  capacity: Int
  floor: Int
  building: Building!
}

type Building {
  ID: Int!
  name: String!
  street: String!
  number: String!
  city: String!
  zip: String!
  latitude: Float!
  longitude: Float!
  zoomLevel: Int!
  rooms: [Room!]
}

type Answer {
  ID: Int!
  title: String!
  points: Int!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  SCALE
  TEXT
}

type Question {
  ID: Int!
  title: String!
  type: QuestionType!
  required: Boolean!
  answers: [Answer!]!
}

type Form {
  eventID: Int!
  title: String!
  description: String
  questions: [Question!]!
}

type Setting {
  key: String!
  value: String!
  type: ScalarType!
}

type AnswerValuePair {
  answer: Answer
  value: String
}

type QuestionAnswersPair {
  question: Question!
  answers: [AnswerValuePair!]!
}

type Application {
  event: Event!
  student: User!
  score: Int!
  accepted: Boolean
  form: Form!
  responses: [QuestionAnswersPair!]
}

type Query {
  events(id: [Int!], umbrellaID: [Int!], topic: [String!], type: [String!], needsTutors: Boolean, onlyFuture: Boolean, userMail: [String!], includeSupportingEvents: Boolean): [Event!]!
  umbrellas(id: [Int!], onlyFuture: Boolean): [Event!]!
  buildings(id: [Int!]): [Building!]!
  rooms(number: [String!], buildingID: [Int!]): [Room!]!
  labels(name: [String!], kind: [LabelKind!], umbrellaID: [Int!]): [Label!]!
  settings(key: [String!], type: [ScalarType!]): [Setting!]!
  users(mail: [String!]): [User!]! @auth(rule: IS_USER)
  forms(id: [Int!]): [Form!]!
  applications(eventID: Int, mail: [String!]): [Application!]! @auth(rule: IS_USER)
  tutorials(id: [Int!], eventID: [Int!], umbrellaID: [Int!], tutorMail: [String!], studentMail: [String!]): [Tutorial!]!
  login(mail: String!, password: String!): String!
}

input NewUser {
  fn: String!
  sn: String!
  mail: String!
  password: String
}

input UpdateUser {
  fn: String!
  sn: String!
  mail: String! @auth(rule: IS_USER)
  password: String
  role: String
  confirmed: Boolean
}

input NewEvent {
  title: String!
  description: String
  topicName: String
  typeName: String
  needsTutors: Boolean!
  from: Time!
  to: Time!
  umbrellaID: Int
}

input NewTutorial {
  eventID: Int!
  roomNumber: String!
  buildingID: Int!
  tutors: [String!]
}

input NewBuilding {
  name: String
  street: String!
  number: String!
  city: String!
  zip: String!
  latitude: Float!
  longitude: Float!
  zoomLevel: Int
}

input NewRoom {
  number: String!
  name: String
  capacity: Int!
  floor: Int
  buildingID: Int!
}

input NewLabel {
  name: String!
  color: String
  kind: LabelKind!
}

input NewAnswer {
  title: String!
  points: Int!
}

input NewQuestion {
  title: String!
  type: QuestionType!
  answers: [NewAnswer!]!
  required: Boolean!
}

input NewForm {
  title: String!
  description: String
  questions: [NewQuestion!]!
}

input NewSetting {
  key: String!
  value: String
  type: ScalarType
}

input NewUserToEventAvailability {
  userMail: String! @auth(rule: IS_USER)
  eventID: [Int!]!
}

input TutorialToUserAssignment {
  userMail: String!
  tutorialID: Int!
}

input UserToTutorialRegistration {
  userMail: String!
  tutorialID: Int!
}

input RoomToEventAvailability {
  roomNumber: String!
  buildingID: Int!
  eventID: Int!
}

input NewQuestionResponsePair {
  questionID: Int!
  answerID: Int
  value: String
}

input NewUserToEventApplication {
  userMail: String! @auth(rule: IS_USER)
  eventID: Int!
  answers: [NewQuestionResponsePair!]
}

type Mutation {
  addUser(user: NewUser!): String!
  updateUser(user: UpdateUser!): String!
  deleteUser(mail: [String!]!): Int! @auth(rule: IS_USER)
  addEvent(event: [NewEvent!]!): [Int!]! @auth(role: ADMIN)
  updateEvent(id: Int!, event: NewEvent!): Int! @auth(role: ADMIN)
  deleteEvent(id: [Int!]!): Int! @auth(role: ADMIN)
  addTutorial(tutorial: [NewTutorial!]!): [Int!]! @auth(role: ADMIN)
  updateTutorial(id: Int!, tutorial: NewTutorial!): Tutorial! @auth(role: ADMIN)
  deleteTutorial(id: [Int!]!): Int! @auth(role: ADMIN)
  addBuilding(building: NewBuilding!): Building! @auth(role: ADMIN)
  updateBuilding(id: Int!, building: NewBuilding!): Building! @auth(role: ADMIN)
  deleteBuilding(id: [Int!]): Int! @auth(role: ADMIN)
  addRoom(room: NewRoom!): Room! @auth(role: ADMIN)
  updateRoom(room: NewRoom!): Room! @auth(role: ADMIN)
  deleteRoom(number: [String!]!, buildingID: Int!): Int! @auth(role: ADMIN)
  addLabel(label: NewLabel!): Label! @auth(role: ADMIN)
  updateLabel(label: NewLabel!): Label! @auth(role: ADMIN)
  deleteLabel(name: [String!]!): Int! @auth(role: ADMIN)
  upsertSetting(setting: NewSetting!): String! @auth(role: ADMIN)
  deleteSetting(key: [String!]!): Int! @auth(role: ADMIN)
  addForm(form: NewForm!): Form! @auth(role: ADMIN)
  updateForm(id: Int!, form: NewForm!): Form! @auth(role: ADMIN)
  deleteForm(id: [Int!]!): Int! @auth(role: ADMIN)

  addTutorAssignmentForTutorial(assignment: TutorialToUserAssignment!): String! @auth(role: ADMIN)
  deleteTutorAssignmentForTutorial(assignment: TutorialToUserAssignment!): String! @auth(role: ADMIN)
  addTutorAvailabilityForEvent(availability: NewUserToEventAvailability!): User!
  deleteTutorAvailabilityForEvent(availability: NewUserToEventAvailability!): User!
  addStudentRegistrationForTutorial(registration: UserToTutorialRegistration!): String! @auth(rule: IS_USER)
  deleteStudentRegistrationForTutorial(registration: UserToTutorialRegistration!): String! @auth(rule: IS_USER)
  addStudentApplicationForEvent(application: NewUserToEventApplication!): User!
  deleteStudentApplicationForEvent(mail: String!, eventID: Int!): User!
  linkSupportingEventToEvent(eventID: Int!, supportingEventID: [Int!]!): Int! @auth(role: ADMIN)
  unlinkSupportingEventFromEvent(eventID: Int!, supportingEventID: Int!): Int! @auth(role: ADMIN)
}
