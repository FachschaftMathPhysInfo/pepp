scalar UUID
scalar Date
scalar Time
scalar HexColorCode

interface User {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
}

type Student implements User {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  answers: [String!]!
  score: Int
  accepted: Boolean
  eventsRegistered: [Event!]
}

type Tutor implements User {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  eventsAvailable: [Event!]
  eventsAssigned: [Event!]
}

type Topic {
  name: String!
  color: HexColorCode
  events: [Event!]
}

type EventTutorRoomPair {
  tutors: [Tutor!]!
  room: Room
}

type Event {
  ID: UUID!
  assignedTutorsWithRoom: [EventTutorRoomPair!]
  needsTutors: Boolean!
  availableTutors: [Tutor!]
  title: String!
  description: String
  topic: Topic!
  roomsAvailable: [Room!]
  link: String
  from: Time!
  to: Time!
}

type Room {
  name: String
  number: String!
  capacity: Int
  floor: Int
  building: Building!
}

type Building {
  ID: UUID!
  name: String!
  street: String!
  number: String!
  city: String!
  zip: Int!
  osm: String!
  rooms: [Room!]
}

type Query {
  students(mail: [String!]): [Student!]!
  tutors(mail: [String!], eventID: UUID): [Tutor!]!
  events(id: [UUID!], topic: [String!], needsTutors: Boolean): [Event!]!
  buildings(id: [UUID!]): [Building!]!
  rooms(number: [String!], buildingID: UUID!): [Room!]!
  topics(name: [String!]): [Topic!]!
}

input NewTutor {
  fn: String!
  sn: String
  mail: String!
  eventsAvailable: [UUID!]
}

input NewStudent {
  fn: String!
  sn: String!
  mail: String!
}

input NewEvent {
  title: String!
  description: String
  topicName: String!
  link: String
  needsTutors: Boolean!
  from: Time!
  to: Time!
}

input NewBuilding {
  name: String
  street: String!
  number: String!
  city: String!
  zip: Int!
  osm: String!
}

input NewRoom {
  number: String!
  name: String
  capacity: Int
  floor: Int
  buildingID: UUID!
}

input NewTopic {
  name: String!
  color: HexColorCode
}

input NewEventToTutorLink {
  eventID: UUID!
  tutorMail: String!
  roomNumber: String!
  buildingID: UUID!
}

input NewRoomToEventLink {
  eventID: UUID!
  roomNumber: String!
  buildingID: String!
}

type Mutation {
  addRegistration(student: NewStudent!): String!
  updateStudentAcceptedStatus(studentMail: String!, accepted: Boolean!): String!
  addTutor(tutor: NewTutor!): String!
  updateTutor(tutorMail: String!, tutor: NewTutor!): String!
  addEvent(event: NewEvent!): String!
  updateEvent(eventID: UUID!, event: NewEvent!): String!
  addBuilding(building: NewBuilding!): String!
  addRoom(room: NewRoom!): String!
  updateBuilding(buildingID: UUID!, building: NewBuilding!): String!
  addTopic(topic: NewTopic!): String!
  linkAvailableRoomToEvent(link: NewRoomToEventLink!): String!
  linkTutorToEventAndRoom(link: NewEventToTutorLink!): String!
}
