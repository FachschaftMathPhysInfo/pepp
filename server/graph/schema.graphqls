scalar HexColorCode
scalar timestamptz

enum ScalarType {
  STRING
  INT
  FLOAT
  BOOLEAN
  COLOR
  TIMESTAMP
}

type User {
  fn: String!
  sn: String!
  mail: String!
  confirmed: Boolean!
  eventsRegistered: [Event!]
  eventsAvailable: [Event!]
  eventsAssigned: [Event!]
  applications: [Application!]
}

enum LabelKind {
  EVENT_TYPE
  TOPIC
}

type Label {
  name: String!
  color: HexColorCode
}

type EventTutorRoomPair {
  tutors: [User!]
  room: Room
  registrations: Int
}

type Event {
  ID: Int!
  tutorsAssigned: [EventTutorRoomPair!]
  tutorsAvailable: [User!]
  roomsAvailable: [Room!]
  umbrella: Event
  needsTutors: Boolean!
  title: String!
  description: String
  topic: Label!
  type: Label!
  from: timestamptz!
  to: timestamptz!
}

type Room {
  name: String
  number: String!
  capacity: Int
  floor: Int
  building: Building!
}

type Building {
  ID: Int!
  name: String!
  street: String!
  number: String!
  city: String!
  zip: Int!
  osm: String!
  rooms: [Room!]
}

type Answer {
  ID: Int!
  title: String!
  points: Int!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  SCALE
  TEXT
}

type Question {
  ID: Int!
  title: String!
  type: QuestionType!
  required: Boolean!
  answers: [Answer!]!
}

type Form {
  eventID: Int!
  title: String!
  description: String
  questions: [Question!]!
}

type Setting {
  key: String!
  value: String!
  type: ScalarType!
}

type AnswerValuePair {
  answer: Answer
  value: String
}

type QuestionAnswersPair {
  question: Question!
  answers: [AnswerValuePair!]!
}

type Application {
  event: Event!
  student: User!
  score: Int!
  accepted: Boolean
  form: Form!
  responses: [QuestionAnswersPair!]
}

type Query {
  events(id: [Int!], umbrellaID: [Int!], label: [String!], needsTutors: Boolean, onlyFuture: Boolean, userMail: [String!]): [Event!]!
  umbrellas(id: [Int!], onlyFuture: Boolean): [Event!]!
  buildings(id: [Int!]): [Building!]!
  rooms(number: [String!], buildingID: Int!): [Room!]!
  labels(name: [String!], kind: [LabelKind!]): [Label!]!
  settings(key: [String!], type: [ScalarType!]): [Setting!]!
  users(mail: [String!]): [User!]!
  forms(id: [Int!]): [Form!]!
  applications(eventID: Int, studentMail: [String!]): [Application!]!
}

input NewUser {
  fn: String!
  sn: String
  mail: String!
  password: String
}

input NewEvent {
  title: String!
  description: String
  topicName: String
  typeName: String
  needsTutors: Boolean!
  from: timestamptz!
  to: timestamptz!
  umbrellaID: Int
}

input NewBuilding {
  name: String
  street: String!
  number: String!
  city: String!
  zip: Int!
  osm: String!
}

input NewRoom {
  number: String!
  name: String
  capacity: Int
  floor: Int
  buildingID: Int!
}

input NewLabel {
  name: String!
  color: HexColorCode
  kind: LabelKind!
}

input NewAnswer {
  title: String!
  points: Int!
}

input NewQuestion {
  title: String!
  type: QuestionType!
  answers: [NewAnswer!]!
  required: Boolean!
}

input NewForm {
  title: String!
  description: String
  questions: [NewQuestion!]!
}

input NewSetting {
  key: String!
  value: String
  type: ScalarType
}

input EventToUserAssignment {
  eventID: Int!
  userMail: String!
  roomNumber: String!
  buildingID: Int!
}

input NewUserToEventAvailability {
  userMail: String!
  eventID: [Int!]!
}

input RoomToEventAvailability {
  roomNumber: String!
  buildingID: Int!
  eventID: Int!
}

input UserToEventRegistration {
  eventID: Int!
  userMail: String!
  roomNumber: String!
  buildingID: Int!
}

input NewQuestionResponsePair {
  questionID: Int!
  answerID: Int
  value: String
}

input NewUserToEventApplication {
  userMail: String!
  eventID: Int!
  answers: [NewQuestionResponsePair!]
}

type Mutation {
  addUser(user: NewUser!): User!
  updateUser(user: NewUser!): User!
  deleteUser(mail: [String!]!): Int!
  addTutor(tutor: NewUser!, availability: NewUserToEventAvailability!): User!
  addStudent(student: NewUser!, application: NewUserToEventApplication!): User!
  addEvent(event: NewEvent!): Event!
  updateEvent(id: Int!, event: NewEvent!): Event!
  deleteEvent(id: [Int!]!): Int!
  addBuilding(building: NewBuilding!): Building!
  updateBuilding(id: Int!, building: NewBuilding!): Building!
  deleteBuilding(id: [Int!]!): Int!
  addRoom(room: NewRoom!): Room!
  updateRoom(room: NewRoom!): Room!
  deleteRoom(number: [String!]!, buildingID: Int!): Int!
  addLabel(label: NewLabel!): Label!
  updateLabel(label: NewLabel!): Label!
  deleteLabel(name: [String!]!): Int!
  addSetting(setting: NewSetting!): Setting!
  updateSetting(setting: NewSetting!): Setting!
  deleteSetting(key: [String!]!): Int!
  addForm(form: NewForm!): Form!
  updateForm(id: Int!, form: NewForm!): Form!
  deleteForm(id: [Int!]!): Int!

  addEventAssignmentForTutor(assignment: EventToUserAssignment!): Event!
  deleteEventAssignmentForTutor(assignment: EventToUserAssignment!): Event!
  addTutorAvailabilityForEvent(availability: NewUserToEventAvailability!): User!
  deleteTutorAvailabilityForEvent(availability: NewUserToEventAvailability!): User!
  addRoomAvailabilityForEvent(availability: RoomToEventAvailability!): Room!
  deleteRoomAvailabilityForEvent(availability: RoomToEventAvailability!): Room!
  addStudentRegistrationForEvent(registration: UserToEventRegistration!): User!
  deleteStudentRegistrationForEvent(registration: UserToEventRegistration!): User!
  addStudentApplicationForEvent(application: NewUserToEventApplication!): User!
  deleteStudentApplicationForEvent(mail: String!, eventID: Int!): User!
}
