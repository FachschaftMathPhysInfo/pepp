package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/FachschaftMathPhysInfo/pepp/server/graph/model"
	"github.com/FachschaftMathPhysInfo/pepp/server/models"
	"github.com/FachschaftMathPhysInfo/pepp/server/utils"
	"github.com/google/uuid"
)

// AddRegistration is the resolver for the addRegistration field.
func (r *mutationResolver) AddRegistration(ctx context.Context, student model.NewStudent) (string, error) {
	panic(fmt.Errorf("not implemented: AddRegistration - addRegistration"))
}

// UpdateStudentAcceptedStatus is the resolver for the updateStudentAcceptedStatus field.
func (r *mutationResolver) UpdateStudentAcceptedStatus(ctx context.Context, studentMail string, accepted bool) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateStudentAcceptedStatus - updateStudentAcceptedStatus"))
}

// AddTutor is the resolver for the addTutor field.
func (r *mutationResolver) AddTutor(ctx context.Context, tutor model.NewTutor) (string, error) {
	err := utils.AddPerson(ctx, tutor.Fn, tutor.Sn, tutor.Mail, models.Tutor, r.DB)
	if err != nil {
		return "Failed to add Tutor", err
	}

	return "Successfully added new Tutor", nil
}

// UpdateTutor is the resolver for the updateTutor field.
func (r *mutationResolver) UpdateTutor(ctx context.Context, tutorMail string, input model.NewTutor) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateTutor - updateTutor"))
}

// AddEvent is the resolver for the addEvent field.
func (r *mutationResolver) AddEvent(ctx context.Context, event model.NewEvent) (string, error) {
	from, err := time.Parse(time.RFC3339, event.From)
	if err != nil {
		return fmt.Sprintf("Unable to parse timestamp: %s", event.From), err
	}

	to, err := time.Parse(time.RFC3339, event.To)
	if err != nil {
		return fmt.Sprintf("Unable to parse timestamp: %s", event.To), err
	}

	newEvent := &models.Event{
		ID:          uuid.New(),
		TutorMail:   *event.TutorMail,
		Title:       event.Title,
		Description: *event.Description,
		From:        from,
		To:          to,
	}

	_, err = r.DB.NewInsert().Model(newEvent).Exec(ctx)
	if err != nil {
		return "Failed to insert the event inside the Database", err
	}

	return "Successfully inserted new event", nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, eventID string, event model.NewEvent) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// AddBuilding is the resolver for the addBuilding field.
func (r *mutationResolver) AddBuilding(ctx context.Context, building model.NewBuilding) (string, error) {
	panic(fmt.Errorf("not implemented: AddBuilding - addBuilding"))
}

// AddRoom is the resolver for the addRoom field.
func (r *mutationResolver) AddRoom(ctx context.Context, buildingID string, room string) (string, error) {
	panic(fmt.Errorf("not implemented: AddRoom - addRoom"))
}

// UpdateBuilding is the resolver for the updateBuilding field.
func (r *mutationResolver) UpdateBuilding(ctx context.Context, buildingID string, building model.NewBuilding) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateBuilding - updateBuilding"))
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: Students - students"))
}

// Tutors is the resolver for the tutors field.
func (r *queryResolver) Tutors(ctx context.Context) ([]*model.Tutor, error) {
	var tutors []*models.Person

	err := r.DB.NewSelect().
		Model(&tutors).
		Where("type = ?", "tutor").
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	var transformedTutors []*model.Tutor
	for _, tutor := range tutors {
		transformedTutor := &model.Tutor{
			Fn:        tutor.Fn,
			Sn:        tutor.Sn,
			Mail:      tutor.Mail,
			Confirmed: tutor.Confirmed,
		}
		transformedTutors = append(transformedTutors, transformedTutor)
	}

	return transformedTutors, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	var events []*models.Event
	err := r.DB.NewSelect().Model(&events).Scan(ctx)
	if err != nil {
		return nil, err
	}
	var transformedEvents []*model.Event
	for _, event := range events {
		person, err := utils.GetPerson(ctx, event.TutorMail, r.DB)
		tutor := &model.Tutor{}
		if err != nil {
			tutor = nil
		} else {
			tutor.Fn = person.Fn
			tutor.Sn = person.Sn
			tutor.Mail = person.Mail
			tutor.Confirmed = person.Confirmed
		}

		transformedEvent := &model.Event{
			ID:          event.ID.String(),
			Tutor:       tutor,
			Title:       event.Title,
			Description: &event.Description,
			From:        event.From.Format(time.RFC3339),
			To:          event.To.Format(time.RFC3339),
		}
		transformedEvents = append(transformedEvents, transformedEvent)
	}

	return transformedEvents, nil
}

// Buildings is the resolver for the buildings field.
func (r *queryResolver) Buildings(ctx context.Context) ([]*model.Building, error) {
	panic(fmt.Errorf("not implemented: Buildings - buildings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
