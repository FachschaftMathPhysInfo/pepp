package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"time"

	"github.com/FachschaftMathPhysInfo/pepp/server/graph/model"
	"github.com/FachschaftMathPhysInfo/pepp/server/models"
	"github.com/google/uuid"
	"github.com/uptrace/bun"
)

// ID is the resolver for the id field.
func (r *buildingResolver) ID(ctx context.Context, obj *models.Building) (string, error) {
	return obj.ID.String(), nil
}

// ID is the resolver for the id field.
func (r *eventResolver) ID(ctx context.Context, obj *models.Event) (string, error) {
	return obj.ID.String(), nil
}

// Tutor is the resolver for the tutor field.
func (r *eventResolver) Tutor(ctx context.Context, obj *models.Event) (*models.Tutor, error) {
	person, err := r.GetPerson(ctx, obj.TutorMail)
	if err != nil {
		return nil, nil
	}

	tutor := &models.Tutor{
		Person: *person,
	}

	return tutor, nil
}

// Building is the resolver for the building field.
func (r *eventResolver) Building(ctx context.Context, obj *models.Event) (*models.Building, error) {
	building := new(models.Building)
	err := r.DB.NewSelect().
		Model(building).
		Where("id = ?", obj.BuildingId).
		Scan(ctx)

	if err != nil {
		return nil, nil
	}

	return building, nil
}

// From is the resolver for the from field.
func (r *eventResolver) From(ctx context.Context, obj *models.Event) (string, error) {
	return obj.From.Format(time.RFC3339), nil
}

// To is the resolver for the to field.
func (r *eventResolver) To(ctx context.Context, obj *models.Event) (string, error) {
	return obj.To.Format(time.RFC3339), nil
}

// AddRegistration is the resolver for the addRegistration field.
func (r *mutationResolver) AddRegistration(ctx context.Context, student model.NewStudent) (string, error) {
	panic(fmt.Errorf("not implemented: AddRegistration - addRegistration"))
}

// UpdateStudentAcceptedStatus is the resolver for the updateStudentAcceptedStatus field.
func (r *mutationResolver) UpdateStudentAcceptedStatus(ctx context.Context, studentMail string, accepted bool) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateStudentAcceptedStatus - updateStudentAcceptedStatus"))
}

// AddTutor is the resolver for the addTutor field.
func (r *mutationResolver) AddTutor(ctx context.Context, tutor models.Person) (string, error) {
	tutor.Type = models.PersonTypeTutor
	err := r.AddPerson(ctx, tutor)
	if err != nil {
		return "Failed to add Tutor", err
	}

	return "Successfully added new Tutor", nil
}

// UpdateTutor is the resolver for the updateTutor field.
func (r *mutationResolver) UpdateTutor(ctx context.Context, tutorMail string, tutor models.Person) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateTutor - updateTutor"))
}

// AddEvent is the resolver for the addEvent field.
func (r *mutationResolver) AddEvent(ctx context.Context, event models.Event) (string, error) {
	_, err := r.DB.NewInsert().Model(&event).Exec(ctx)
	if err != nil {
		return "Failed to insert the event", err
	}

	return "Successfully inserted new event", nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, eventID string, event models.Event) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateEvent - updateEvent"))
}

// AddBuilding is the resolver for the addBuilding field.
func (r *mutationResolver) AddBuilding(ctx context.Context, building models.Building) (string, error) {
	_, err := r.DB.NewInsert().Model(&building).Exec(ctx)
	if err != nil {
		return "Failed to insert building", err
	}

	return "Successfully inserted new building", nil
}

// AddRoom is the resolver for the addRoom field.
func (r *mutationResolver) AddRoom(ctx context.Context, buildingID string, room string) (string, error) {
	panic(fmt.Errorf("not implemented: AddRoom - addRoom"))
}

// UpdateBuilding is the resolver for the updateBuilding field.
func (r *mutationResolver) UpdateBuilding(ctx context.Context, buildingID string, building models.Building) (string, error) {
	panic(fmt.Errorf("not implemented: UpdateBuilding - updateBuilding"))
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	panic(fmt.Errorf("not implemented: Students - students"))
}

// Tutors is the resolver for the tutors field.
func (r *queryResolver) Tutors(ctx context.Context) ([]*models.Tutor, error) {
	var people []*models.Person

	err := r.DB.NewSelect().
		Model(&people).
		Where("type = ?", models.PersonTypeTutor.String()).
		Scan(ctx)

	if err != nil {
		return nil, err
	}

	var tutors []*models.Tutor
	for _, person := range people {
		tutor := &models.Tutor{
			Person: *person,
		}

		tutors = append(tutors, tutor)
	}

	return tutors, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, subjects []*models.Subject) ([]*models.Event, error) {
	var err error
	var events []*models.Event

	if subjects != nil {
		err = r.DB.NewSelect().
			Model(&events).
			Where("subject IN (?)", bun.In(subjects)).
			Scan(ctx)
	} else {
		err = r.DB.NewSelect().Model(&events).Scan(ctx)
	}

	if err != nil {
		return nil, err
	}

	return events, nil
}

// Buildings is the resolver for the buildings field.
func (r *queryResolver) Buildings(ctx context.Context) ([]*models.Building, error) {
	var buildings []*models.Building
	err := r.DB.NewSelect().Model(&buildings).Scan(ctx)
	if err != nil {
		return nil, err
	}

	return buildings, nil
}

// BuildingID is the resolver for the buildingId field.
func (r *newEventResolver) BuildingID(ctx context.Context, obj *models.Event, data *string) error {
	if data != nil {
		uuid, err := uuid.Parse(*data)
		if err != nil {
			return err
		}

		obj.BuildingId = uuid
	}

	return nil
}

// From is the resolver for the from field.
func (r *newEventResolver) From(ctx context.Context, obj *models.Event, data string) error {
	from, err := time.Parse(time.RFC3339, data)
	if err != nil {
		return err
	}

	obj.From = from

	return nil
}

// To is the resolver for the to field.
func (r *newEventResolver) To(ctx context.Context, obj *models.Event, data string) error {
	to, err := time.Parse(time.RFC3339, data)
	if err != nil {
		return err
	}

	obj.To = to

	return nil
}

// Building returns BuildingResolver implementation.
func (r *Resolver) Building() BuildingResolver { return &buildingResolver{r} }

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// NewEvent returns NewEventResolver implementation.
func (r *Resolver) NewEvent() NewEventResolver { return &newEventResolver{r} }

type buildingResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type newEventResolver struct{ *Resolver }
