package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"math/rand"
	"os"
	"regexp"
	"strconv"
	"time"

	"github.com/FachschaftMathPhysInfo/pepp/server/email"
	"github.com/FachschaftMathPhysInfo/pepp/server/graph/model"
	"github.com/FachschaftMathPhysInfo/pepp/server/models"
	hermes "github.com/matcornic/hermes/v2"
	"github.com/uptrace/bun"
)

// TutorsAssigned is the resolver for the tutorsAssigned field.
func (r *eventResolver) TutorsAssigned(ctx context.Context, obj *models.Event) ([]*model.EventTutorRoomPair, error) {
	var eventToTutorRelations []*models.EventToUserAssignment
	if err := r.DB.NewSelect().
		Model(&eventToTutorRelations).
		Relation("Room").
		Relation("Room.Building").
		Relation("Tutor").
		Where("event_id = ?", obj.ID).
		Scan(ctx); err != nil {
		return nil, err
	}

	roomMap := make(map[string]*model.EventTutorRoomPair)
	for _, eventToTutorRelation := range eventToTutorRelations {
		roomKey := eventToTutorRelation.Room.Number +
			strconv.Itoa(int(eventToTutorRelation.Room.BuildingID))
		if room, exists := roomMap[roomKey]; exists {
			room.Tutors = append(room.Tutors, eventToTutorRelation.User)
		} else {
			registrationsCount, err := r.DB.NewSelect().
				Model((*models.UserToEventRegistration)(nil)).
				Where("event_id = ?", obj.ID).
				Where("room_number = ?", eventToTutorRelation.Room.Name).
				Where("building_id = ?", eventToTutorRelation.BuildingID).
				Count(ctx)

			if err != nil {
				return nil, err
			}

			roomMap[roomKey] = &model.EventTutorRoomPair{
				Tutors:        []*models.User{eventToTutorRelation.User},
				Room:          eventToTutorRelation.Room,
				Registrations: &registrationsCount,
			}
		}
	}

	var tutorRoomPairs []*model.EventTutorRoomPair
	for _, tutorRoomPair := range roomMap {
		tutorRoomPairs = append(tutorRoomPairs, tutorRoomPair)
	}

	return tutorRoomPairs, nil
}

// From is the resolver for the from field.
func (r *eventResolver) From(ctx context.Context, obj *models.Event) (string, error) {
	return obj.From.String(), nil
}

// To is the resolver for the to field.
func (r *eventResolver) To(ctx context.Context, obj *models.Event) (string, error) {
	return obj.To.String(), nil
}

// AddUser is the resolver for the addUser field.
func (r *mutationResolver) AddUser(ctx context.Context, user models.User) (*models.User, error) {
	user.SessionID = rand.Int31n(9999999-1000000+1) + 1000000
	if _, err := r.DB.NewInsert().
		Model(&user).
		Exec(ctx); err != nil {
		return nil, err
	}

	m := r.MailConfig.Confirmation

	m.Actions[0].Button.Link = fmt.Sprintf("%s/confirm/%s",
		os.Getenv("PUBLIC_URL"), strconv.Itoa(int(user.SessionID)))

	if err := email.Send(user, m, r.MailConfig); err != nil {
		return nil, err
	}

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, user models.User) (*models.User, error) {
	if _, err := r.DB.NewUpdate().
		Model(&user).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, mail []string) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.User)(nil)).
		Where("mail IN (?)", bun.In(mail)).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), nil
}

// AddTutor is the resolver for the addTutor field.
func (r *mutationResolver) AddTutor(ctx context.Context, tutor models.User, availability model.NewUserToEventAvailability) (*models.User, error) {
	if _, err := r.Mutation().AddUser(ctx, tutor); err != nil {
		return nil, err
	}

	user, err := r.Mutation().AddTutorAvailabilityForEvent(ctx, availability)
	if err != nil {
		return nil, err
	}

	return user, nil
}

// AddEvent is the resolver for the addEvent field.
func (r *mutationResolver) AddEvent(ctx context.Context, event models.Event) (*models.Event, error) {
	if _, err := r.DB.NewInsert().
		Model(&event).
		Exec(ctx); err != nil {
		return nil, err
	}

	return &event, nil
}

// UpdateEvent is the resolver for the updateEvent field.
func (r *mutationResolver) UpdateEvent(ctx context.Context, id int, event models.Event) (*models.Event, error) {
	if _, err := r.DB.NewUpdate().
		Model(&event).
		Where("id = ?", id).
		Exec(ctx); err != nil {
		return nil, err
	}

	updatedEvent, err := r.Query().Events(ctx, []int{id}, nil, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}

	return updatedEvent[0], nil
}

// DeleteEvent is the resolver for the deleteEvent field.
func (r *mutationResolver) DeleteEvent(ctx context.Context, id []int) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.Event)(nil)).
		Where("id IN (?)", bun.In(id)).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), nil
}

// AddBuilding is the resolver for the addBuilding field.
func (r *mutationResolver) AddBuilding(ctx context.Context, building models.Building) (*models.Building, error) {
	if _, err := r.DB.NewInsert().
		Model(&building).
		Exec(ctx); err != nil {
		return nil, err
	}

	return &building, nil
}

// UpdateBuilding is the resolver for the updateBuilding field.
func (r *mutationResolver) UpdateBuilding(ctx context.Context, id int, building models.Building) (*models.Building, error) {
	if _, err := r.DB.NewUpdate().
		Model(&building).
		Where("id = ?", id).
		Exec(ctx); err != nil {
		return nil, err
	}

	updatedBuilding, err := r.Query().Buildings(ctx, []int{id})
	if err != nil {
		return nil, err
	}

	return updatedBuilding[0], nil
}

// DeleteBuilding is the resolver for the deleteBuilding field.
func (r *mutationResolver) DeleteBuilding(ctx context.Context, id []int) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.Building)(nil)).
		Where("id = ?", id).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), err
}

// AddRoom is the resolver for the addRoom field.
func (r *mutationResolver) AddRoom(ctx context.Context, room models.Room) (*models.Room, error) {
	if _, err := r.DB.NewInsert().
		Model(&room).
		Exec(ctx); err != nil {
		return nil, err
	}

	return &room, nil
}

// UpdateRoom is the resolver for the updateRoom field.
func (r *mutationResolver) UpdateRoom(ctx context.Context, room models.Room) (*models.Room, error) {
	if _, err := r.DB.NewUpdate().
		Model(&room).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	updatedRoom, err := r.Query().Rooms(ctx, []string{room.Number}, int(room.BuildingID))
	if err != nil {
		return nil, err
	}

	return updatedRoom[0], nil
}

// DeleteRoom is the resolver for the deleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, number []string, buildingID int) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.Room)(nil)).
		Where("number = ?", number).
		Where("building_id = ?", buildingID).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), nil
}

// AddLabel is the resolver for the addLabel field.
func (r *mutationResolver) AddLabel(ctx context.Context, label models.Label) (*models.Label, error) {
	if label.Color == "" {
		label.Color = "#D1D1D1"
	}

	if _, err := r.DB.NewInsert().
		Model(&label).
		Exec(ctx); err != nil {
		return nil, err
	}

	return &label, nil
}

// UpdateLabel is the resolver for the updateLabel field.
func (r *mutationResolver) UpdateLabel(ctx context.Context, label models.Label) (*models.Label, error) {
	if _, err := r.DB.NewUpdate().
		Model(&label).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	updatedLabel, err := r.Query().Labels(ctx, []string{label.Name}, nil)
	if err != nil {
		return nil, err
	}

	return updatedLabel[0], nil
}

// DeleteLabel is the resolver for the deleteLabel field.
func (r *mutationResolver) DeleteLabel(ctx context.Context, name []string) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.Label)(nil)).
		Where("name = ?", name).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), err
}

// AddSetting is the resolver for the addSetting field.
func (r *mutationResolver) AddSetting(ctx context.Context, setting models.Setting) (*models.Setting, error) {
	if setting.Type == model.ScalarTypeColor.String() {
		hexColorPattern := `^#(?:[0-9a-fA-F]{3,4}){1,2}$`
		if match, _ := regexp.MatchString(hexColorPattern, setting.Value); !match {
			return nil, fmt.Errorf("unable to parse color: %s", setting.Value)
		}
	}

	if _, err := r.DB.NewInsert().
		Model(&setting).
		Exec(ctx); err != nil {
		return nil, err
	}

	return &setting, nil
}

// UpdateSetting is the resolver for the updateSetting field.
func (r *mutationResolver) UpdateSetting(ctx context.Context, setting models.Setting) (*models.Setting, error) {
	if _, err := r.DB.NewUpdate().
		Model(&setting).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	updatedSetting, err := r.Query().Settings(ctx, []string{setting.Key}, nil)
	if err != nil {
		return nil, err
	}

	return updatedSetting[0], nil
}

// DeleteSetting is the resolver for the deleteSetting field.
func (r *mutationResolver) DeleteSetting(ctx context.Context, key []string) (int, error) {
	res, err := r.DB.NewDelete().
		Model((*models.Setting)(nil)).
		Where("key = ?", key).
		Exec(ctx)
	if err != nil {
		return 0, err
	}

	rowsAffected, _ := res.RowsAffected()
	return int(rowsAffected), nil
}

// AddEventAssignmentForTutor is the resolver for the addEventAssignmentForTutor field.
func (r *mutationResolver) AddEventAssignmentForTutor(ctx context.Context, assignment models.EventToUserAssignment) (*models.Event, error) {
	res, err := r.DB.NewDelete().
		Model((*models.UserToEventAvailability)(nil)).
		Where("user_mail = ?", assignment.UserMail).
		Where("event_id = ?", assignment.EventID).
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		return nil, fmt.Errorf("Tutor is not available for this event")
	}

	if _, err := r.DB.NewInsert().
		Model(&assignment).
		Exec(ctx); err != nil {
		return nil, err
	}

	if err := r.DB.NewSelect().
		Model(&assignment).
		Relation("Event").
		Relation("Room").
		Relation("Building").
		WherePK().
		Scan(ctx); err != nil {
		return nil, err
	}

	m := r.MailConfig.Assignment

	m.Subject = fmt.Sprintf("%s: %s",
		r.Settings["email-assignment-subject"], assignment.Event.Title)

	roomNumber := assignment.Room.Number
	if assignment.Room.Name != "" {
		roomNumber = fmt.Sprintf("%s (%s)",
			assignment.Room.Name, assignment.Room.Number)
	}

	m.Dictionary = []hermes.Entry{
		{Key: r.Settings["email-assignment-event-title"],
			Value: assignment.Event.Title},
		{Key: r.Settings["email-assignment-date-title"],
			Value: assignment.Event.From.Format("02.01.2006")},
		{Key: r.Settings["email-assignment-time-title"],
			Value: fmt.Sprintf("%s - %s",
				assignment.Event.From.Format("15:04"), assignment.Event.To.Format("15:04"))},
		{Key: r.Settings["email-assignment-room-title"],
			Value: roomNumber},
		{Key: r.Settings["email-assignment-building-title"],
			Value: fmt.Sprintf("%s, %s %s, %s, %s",
				assignment.Building.Name,
				assignment.Building.Street, assignment.Building.Number,
				strconv.Itoa(int(assignment.Building.Zip)), assignment.Building.City)}}

	if err := email.Send(*assignment.User, m, r.MailConfig); err != nil {
		return nil, err
	}

	return assignment.Event, nil
}

// DeleteEventAssignmentForTutor is the resolver for the deleteEventAssignmentForTutor field.
func (r *mutationResolver) DeleteEventAssignmentForTutor(ctx context.Context, assignment models.EventToUserAssignment) (*models.Event, error) {
	res, err := r.DB.NewDelete().
		Model(&assignment).
		WherePK().
		Exec(ctx)
	if err != nil {
		return nil, err
	}

	rowsAffected, _ := res.RowsAffected()
	if rowsAffected == 0 {
		return nil, fmt.Errorf("user was not assigned to this event")
	}

	eventAvailibility := model.NewUserToEventAvailability{
		UserMail: assignment.UserMail,
		EventID:  []int{int(assignment.EventID)},
	}

	if _, err := r.Mutation().AddTutorAvailabilityForEvent(ctx, eventAvailibility); err != nil {
		return nil, err
	}

	event, err := r.Query().Events(ctx, []int{int(assignment.EventID)}, nil, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}

	return event[0], nil
}

// AddTutorAvailabilityForEvent is the resolver for the addTutorAvailabilityForEvent field.
func (r *mutationResolver) AddTutorAvailabilityForEvent(ctx context.Context, availability model.NewUserToEventAvailability) (*models.User, error) {
	availabilitys := []models.UserToEventAvailability{}
	for _, eID := range availability.EventID {
		a := models.UserToEventAvailability{
			UserMail: availability.UserMail,
			EventID:  int32(eID),
		}

		availabilitys = append(availabilitys, a)
	}

	if _, err := r.DB.NewInsert().
		Model(&availabilitys).
		Exec(ctx); err != nil {
		return nil, err
	}

	if err := r.DB.NewSelect().
		Model(&availabilitys).
		Relation("Event").
		WherePK().
		Scan(ctx); err != nil {
		return nil, err
	}

	m := r.MailConfig.Availability

	m.Table.Data = *new([][]hermes.Entry)
	for _, a := range availabilitys {
		e := []hermes.Entry{
			{Key: r.Settings["email-assignment-event-title"], Value: a.Event.Title},
			{Key: r.Settings["email-assignment-date-title"], Value: a.Event.From.Format("02.01")},
			{Key: r.Settings["email-assignment-kind-title"], Value: a.Event.TypeName}}
		m.Table.Data = append(m.Table.Data, e)
	}

	user, err := r.Query().Users(ctx, []string{availability.UserMail})
	if err != nil {
		return nil, err
	}

	if err := email.Send(*user[0], m, r.MailConfig); err != nil {
		return nil, err
	}

	return user[0], nil
}

// DeleteTutorAvailabilityForEvent is the resolver for the deleteTutorAvailabilityForEvent field.
func (r *mutationResolver) DeleteTutorAvailabilityForEvent(ctx context.Context, availability model.NewUserToEventAvailability) (*models.User, error) {
	if _, err := r.DB.NewDelete().
		Model((*models.UserToEventAvailability)(nil)).
		Where("user_mail = ?", availability.UserMail).
		Where("event_id IN (?)", bun.In(availability.EventID)).
		Exec(ctx); err != nil {
		return nil, err
	}

	user, err := r.Query().Users(ctx, []string{availability.UserMail})
	if err != nil {
		return nil, err
	}

	return user[0], nil
}

// AddRoomAvailabilityForEvent is the resolver for the addRoomAvailabilityForEvent field.
func (r *mutationResolver) AddRoomAvailabilityForEvent(ctx context.Context, availability models.RoomToEventAvailability) (*models.Room, error) {
	if _, err := r.DB.NewInsert().
		Model(&availability).
		Exec(ctx); err != nil {
		return nil, err
	}

	room, err := r.Query().Rooms(ctx, []string{availability.RoomNumber}, int(availability.BuildingID))
	if err != nil {
		return nil, err
	}

	return room[0], nil
}

// DeleteRoomAvailabilityForEvent is the resolver for the deleteRoomAvailabilityForEvent field.
func (r *mutationResolver) DeleteRoomAvailabilityForEvent(ctx context.Context, availability models.RoomToEventAvailability) (*models.Room, error) {
	if _, err := r.DB.NewDelete().
		Model(&availability).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	room, err := r.Query().Rooms(ctx, []string{availability.RoomNumber}, int(availability.BuildingID))
	if err != nil {
		return nil, err
	}

	return room[0], nil
}

// AddStudentRegistrationForEvent is the resolver for the addStudentRegistrationForEvent field.
func (r *mutationResolver) AddStudentRegistrationForEvent(ctx context.Context, registration models.UserToEventRegistration) (*models.User, error) {
	if _, err := r.DB.NewInsert().
		Model(&registration).
		Exec(ctx); err != nil {
		return nil, err
	}

	user, err := r.Query().Users(ctx, []string{registration.UserMail})
	if err != nil {
		return nil, err
	}

	return user[0], nil
}

// DeleteStudentRegistrationForEvent is the resolver for the deleteStudentRegistrationForEvent field.
func (r *mutationResolver) DeleteStudentRegistrationForEvent(ctx context.Context, registration models.UserToEventRegistration) (*models.User, error) {
	if _, err := r.DB.NewDelete().
		Model(&registration).
		WherePK().
		Exec(ctx); err != nil {
		return nil, err
	}

	user, err := r.Query().Users(ctx, []string{registration.UserMail})
	if err != nil {
		return nil, err
	}

	return user[0], nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, id []int, umbrellaID []int, label []string, needsTutors *bool, onlyFuture *bool, userMail []string) ([]*models.Event, error) {
	var events []*models.Event

	query := r.DB.NewSelect().
		Model(&events).
		Relation("Topic").
		Relation("Type").
		Relation("TutorsAssigned").
		Relation("TutorsAvailable").
		Relation("RoomsAvailable").
		Relation("Umbrella").
		Where(`"e"."umbrella_id" IS NOT NULL`)

	if umbrellaID != nil {
		query = query.Where(`"e"."umbrella_id" IN (?)`, bun.In(umbrellaID))
	}

	if label != nil {
		query = query.
			Where(`"e"."topic_name" IN (?)`, bun.In(label)).
			WhereOr(`"e"."type_name" IN (?)`, bun.In(label))
	}

	if needsTutors != nil {
		query = query.Where(`"e"."needs_tutors" = ?`, *needsTutors)
	}

	if id != nil {
		query = query.Where(`"e"."id" IN (?)`, bun.In(id))
	}

	if onlyFuture != nil && *onlyFuture == true {
		query = query.Where(`"e"."from" >= ?`, time.Now())
	}

	if userMail != nil {
		query = query.
			Join("JOIN event_to_user_assignments AS eta ON eta.event_id = e.id").
			Join("LEFT JOIN user_to_event_availability AS uea ON uea.event_id = e.id").
			Where("uea.tutor_mail IN (?) OR eta.tutor_mail IN (?)", bun.In(userMail), bun.In(userMail))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return events, nil
}

// Umbrellas is the resolver for the umbrellas field.
func (r *queryResolver) Umbrellas(ctx context.Context, id []int, onlyFuture *bool) ([]*models.Event, error) {
	var umbrellas []*models.Event
	query := r.DB.NewSelect().
		Model(&umbrellas).
		Relation("Topic").
		Where("umbrella_id IS NULL")

	if id != nil {
		query = query.Where("id IN (?)", id)
	}

	if onlyFuture != nil && *onlyFuture == true {
		query = query.Where(`"to" >= ?`, time.Now())
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return umbrellas, nil
}

// Buildings is the resolver for the buildings field.
func (r *queryResolver) Buildings(ctx context.Context, id []int) ([]*models.Building, error) {
	var buildings []*models.Building

	query := r.DB.NewSelect().
		Model(&buildings).
		Relation("Rooms")

	if id != nil {
		query = query.Where("id IN (?)", bun.In(id))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return buildings, nil
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context, number []string, buildingID int) ([]*models.Room, error) {
	var rooms []*models.Room

	query := r.DB.NewSelect().
		Model(&rooms).
		Relation("Building").
		Where("building_id = ?", buildingID)

	if number != nil {
		query = query.Where("r.number IN (?)", bun.In(number))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return rooms, nil
}

// Labels is the resolver for the labels field.
func (r *queryResolver) Labels(ctx context.Context, name []string, kind []model.LabelKind) ([]*models.Label, error) {
	var labels []*models.Label

	query := r.DB.NewSelect().
		Model(&labels)

	if name != nil {
		query = query.Where("name IN (?)", bun.In(name))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return labels, nil
}

// Settings is the resolver for the settings field.
func (r *queryResolver) Settings(ctx context.Context, key []string, typeArg []model.ScalarType) ([]*models.Setting, error) {
	var settings []*models.Setting

	query := r.DB.NewSelect().
		Model(&settings)

	if key != nil {
		query = query.Where("key IN (?)", bun.In(key))
	}

	if typeArg != nil {
		var types []string
		for _, t := range typeArg {
			types = append(types, t.String())
		}

		query = query.Where("type IN (?)", bun.In(types))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return settings, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, mail []string) ([]*models.User, error) {
	var users []*models.User

	query := r.DB.NewSelect().
		Model(&users).
		Relation("EventsAssigned").
		Relation("EventsAvailable").
		Relation("EventsRegistered")

	if mail != nil {
		query = query.Where("mail IN (?)", bun.In(mail))
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return users, nil
}

// Capacity is the resolver for the capacity field.
func (r *roomResolver) Capacity(ctx context.Context, obj *models.Room) (*int, error) {
	capacity := int(obj.Capacity)
	return &capacity, nil
}

// Floor is the resolver for the floor field.
func (r *roomResolver) Floor(ctx context.Context, obj *models.Room) (*int, error) {
	floor := int(obj.Floor)
	return &floor, nil
}

// Type is the resolver for the type field.
func (r *settingResolver) Type(ctx context.Context, obj *models.Setting) (model.ScalarType, error) {
	for _, t := range model.AllScalarType {
		if t.String() == obj.Type {
			return t, nil
		}
	}

	return model.ScalarTypeString, fmt.Errorf("unable to resolve type: %s", obj.Type)
}

// From is the resolver for the from field.
func (r *newEventResolver) From(ctx context.Context, obj *models.Event, data string) error {
	from, err := time.Parse(time.RFC3339, data)
	if err != nil {
		return err
	}

	obj.From = from
	return nil
}

// To is the resolver for the to field.
func (r *newEventResolver) To(ctx context.Context, obj *models.Event, data string) error {
	to, err := time.Parse(time.RFC3339, data)
	if err != nil {
		return err
	}

	obj.To = to
	return nil
}

// Kind is the resolver for the kind field.
func (r *newLabelResolver) Kind(ctx context.Context, obj *models.Label, data model.LabelKind) error {
	obj.Kind = data.String()
	return nil
}

// Capacity is the resolver for the capacity field.
func (r *newRoomResolver) Capacity(ctx context.Context, obj *models.Room, data *int) error {
	obj.Capacity = int16(*data)
	return nil
}

// Floor is the resolver for the floor field.
func (r *newRoomResolver) Floor(ctx context.Context, obj *models.Room, data *int) error {
	obj.Floor = int8(*data)
	return nil
}

// Type is the resolver for the type field.
func (r *newSettingResolver) Type(ctx context.Context, obj *models.Setting, data *model.ScalarType) error {
	obj.Type = data.String()
	return nil
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Room returns RoomResolver implementation.
func (r *Resolver) Room() RoomResolver { return &roomResolver{r} }

// Setting returns SettingResolver implementation.
func (r *Resolver) Setting() SettingResolver { return &settingResolver{r} }

// NewEvent returns NewEventResolver implementation.
func (r *Resolver) NewEvent() NewEventResolver { return &newEventResolver{r} }

// NewLabel returns NewLabelResolver implementation.
func (r *Resolver) NewLabel() NewLabelResolver { return &newLabelResolver{r} }

// NewRoom returns NewRoomResolver implementation.
func (r *Resolver) NewRoom() NewRoomResolver { return &newRoomResolver{r} }

// NewSetting returns NewSettingResolver implementation.
func (r *Resolver) NewSetting() NewSettingResolver { return &newSettingResolver{r} }

type eventResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type settingResolver struct{ *Resolver }
type newEventResolver struct{ *Resolver }
type newLabelResolver struct{ *Resolver }
type newRoomResolver struct{ *Resolver }
type newSettingResolver struct{ *Resolver }
