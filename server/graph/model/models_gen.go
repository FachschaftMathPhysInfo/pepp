// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/FachschaftMathPhysInfo/pepp/server/models"
)

type AnswerValuePair struct {
	Answer *models.Answer `json:"answer,omitempty"`
	Value  *string        `json:"value,omitempty"`
}

type AuthPayload struct {
	SessionID string       `json:"sessionID"`
	User      *models.User `json:"user"`
}

type EmailPassword struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type EventTutorRoomPair struct {
	Tutors        []*models.User `json:"tutors,omitempty"`
	Room          *models.Room   `json:"room,omitempty"`
	Registrations *int           `json:"registrations,omitempty"`
}

type Mutation struct {
}

type NewQuestionResponsePair struct {
	QuestionID int     `json:"questionID"`
	AnswerID   *int    `json:"answerID,omitempty"`
	Value      *string `json:"value,omitempty"`
}

type NewUserToEventApplication struct {
	UserMail string                     `json:"userMail"`
	EventID  int                        `json:"eventID"`
	Answers  []*NewQuestionResponsePair `json:"answers,omitempty"`
}

type NewUserToEventAvailability struct {
	UserMail string `json:"userMail"`
	EventID  []int  `json:"eventID"`
}

type Query struct {
}

type QuestionAnswersPair struct {
	Question *models.Question   `json:"question"`
	Answers  []*AnswerValuePair `json:"answers"`
}

type LabelKind string

const (
	LabelKindEventType LabelKind = "EVENT_TYPE"
	LabelKindTopic     LabelKind = "TOPIC"
)

var AllLabelKind = []LabelKind{
	LabelKindEventType,
	LabelKindTopic,
}

func (e LabelKind) IsValid() bool {
	switch e {
	case LabelKindEventType, LabelKindTopic:
		return true
	}
	return false
}

func (e LabelKind) String() string {
	return string(e)
}

func (e *LabelKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LabelKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LabelKind", str)
	}
	return nil
}

func (e LabelKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuestionType string

const (
	QuestionTypeMultipleChoice QuestionType = "MULTIPLE_CHOICE"
	QuestionTypeSingleChoice   QuestionType = "SINGLE_CHOICE"
	QuestionTypeScale          QuestionType = "SCALE"
	QuestionTypeText           QuestionType = "TEXT"
)

var AllQuestionType = []QuestionType{
	QuestionTypeMultipleChoice,
	QuestionTypeSingleChoice,
	QuestionTypeScale,
	QuestionTypeText,
}

func (e QuestionType) IsValid() bool {
	switch e {
	case QuestionTypeMultipleChoice, QuestionTypeSingleChoice, QuestionTypeScale, QuestionTypeText:
		return true
	}
	return false
}

func (e QuestionType) String() string {
	return string(e)
}

func (e *QuestionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuestionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuestionType", str)
	}
	return nil
}

func (e QuestionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScalarType string

const (
	ScalarTypeString    ScalarType = "STRING"
	ScalarTypeInt       ScalarType = "INT"
	ScalarTypeFloat     ScalarType = "FLOAT"
	ScalarTypeBoolean   ScalarType = "BOOLEAN"
	ScalarTypeColor     ScalarType = "COLOR"
	ScalarTypeTimestamp ScalarType = "TIMESTAMP"
)

var AllScalarType = []ScalarType{
	ScalarTypeString,
	ScalarTypeInt,
	ScalarTypeFloat,
	ScalarTypeBoolean,
	ScalarTypeColor,
	ScalarTypeTimestamp,
}

func (e ScalarType) IsValid() bool {
	switch e {
	case ScalarTypeString, ScalarTypeInt, ScalarTypeFloat, ScalarTypeBoolean, ScalarTypeColor, ScalarTypeTimestamp:
		return true
	}
	return false
}

func (e ScalarType) String() string {
	return string(e)
}

func (e *ScalarType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScalarType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScalarType", str)
	}
	return nil
}

func (e ScalarType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
